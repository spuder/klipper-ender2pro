[gcode_macro LEDOFF]
gcode:  SET_PIN PIN=LED VALUE=0

[gcode_macro LEDON]
gcode:  SET_PIN PIN=LED VALUE=1

# [gcode_macro LEDHALF]
# gcode: SET_PIN PIN=LED VALUE=0.5

# [gcode_macro lights_toggle]
# gcode:
#     {% if printer["output_pin_caselight"].value == 100 %}
#       lights_off
#     {% else %}
#       lights_on
#     {% endif %}

# A cleaner way to toggle LED lights
# [gcode_macro lights_toggle2]
# gcode:
#   SET_PIN PIN=LED VALUE={(not printer['LED'].value)|int}

# TURN the LED OFF when disengaging servos
#TODO: also watch for M18
#TODO: figure out how to watch for ready events, 
#since klipper doesn't support M17
# [gcode_macro M84]
# rename_existing: M84.1
# gcode: 
#     M84.1 { rawparams }
#     LEDOFF

# Blink the LEDS 3 times on first boot when system is ready
[delayed_gcode welcome]
initial_duration: 0.01
gcode: 
    blink_led COUNT=5

[gcode_macro blink_led]
gcode:
    {% for flashes in range(params.COUNT|default(3) | int) %}
        SET_PIN PIN=LED VALUE=1
        G4 P250
        SET_PIN PIN=LED VALUE=0
    {% endfor %}

# Run a loop every second to check if the printer is idle
[delayed_gcode event_loop]
initial_duration: 1.
gcode:
    check_state DEBUG=0
    UPDATE_DELAYED_GCODE ID=event_loop DURATION=1

# Adds check_state macro that can be called manually or on a schedule
[gcode_macro check_state]
gcode:
    # Log to the console if human is manually calling `check_status`
    # Dont log to the console if the event_loop is calling since it will clutter up console
    {% set debug = params.DEBUG|default(1)|int %}
    {% if debug == 1 %}
        # Print out the state ('cancelled', 'standby', 'printing', 'paused', 'error')
        { action_respond_info(printer.print_stats.state) }
    {% endif %}

    # Turn on the LED if the printer is busy (not standby)
    # Note: 'cancelled' will stay 'cancelled' until a human clicks 'clear print' in the fluidd/mainsail gui
    # Note: This won't turn on during homing or when print bed is heating since those are blocking states
    {% if printer.print_stats.state == "printing" %}
        LEDON
    {% elif printer.print_stats.state == "paused" %}
        LEDON
    {% elif printer.print_stats.state == "cancelled" %}
        LEDON
    {% elif printer.print_stats.state == "error" %}
        LEDON
    {% else %}
        LEDOFF
    {% endif %}